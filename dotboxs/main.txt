// package main

// import (
// 	"encoding/json"
// 	"fmt"
// 	"net"
// 	"time"
// )

// type Dab struct {
// 	Human         int
// 	Robot         int
// 	Record        [][]int
// 	TimeoutOffset float64
// 	Turn          int
// 	Now           int
// }

// type Robot struct {
// 	dab *Dab
// }

// func NewRobot(dab *Dab) *Robot {
// 	return &Robot{dab: dab}
// }

// func (r *Robot) RequestMove() {
// 	var s0, s1 int
// 	s0, s1 = r.dab.Human, r.dab.Robot

// 	h, v := int32(0), int32(0)
// 	for _, move := range r.dab.Record {
// 		x, y := move[1], move[2]
// 		if move[0] == 0 {
// 			v |= (1 << (y*6 + x))
// 		} else {
// 			h |= (1 << (x*6 + y))
// 		}
// 	}
// 	algorithm := "quctann"
// 	timeout := uint(10+60*r.dab.TimeoutOffset) * 1000

// 	conn, err := net.Dial("tcp", "127.0.0.1:12345")
// 	if err != nil {
// 		fmt.Println("Error connecting:", err)
// 		return
// 	}
// 	defer conn.Close()

// 	arg := map[string]interface{}{
// 		"method": "Server.MakeMove",
// 		"params": []interface{}{map[string]interface{}{
// 			"Algorithm": algorithm,
// 			"Board": map[string]interface{}{
// 				"H":    h,
// 				"V":    v,
// 				"S":    []int{s0, s1},
// 				"Now":  r.dab.Now, // Assuming the robot is always second for simplicity
// 				"Turn": r.dab.Turn,
// 			},
// 			"Timeout": timeout,
// 		}},
// 		"id": int(time.Now().Unix()),
// 	}

// 	data, err := json.Marshal(arg)
// 	if err != nil {
// 		fmt.Println("Error marshaling:", err)
// 		return
// 	}

// 	_, err = conn.Write(data)
// 	if err != nil {
// 		fmt.Println("Error writing:", err)
// 		return
// 	}

// 	buff := make([]byte, 4096) // Increased buffer size to handle larger responses
// 	n, err := conn.Read(buff)
// 	if err != nil {
// 		fmt.Println("Error reading:", err)
// 		return
// 	}

// 	var res map[string]interface{}
// 	if err := json.Unmarshal(buff[:n], &res); err != nil {
// 		fmt.Println("Error unmarshaling:", err)
// 		return
// 	}

// 	if result, ok := res["result"].(map[string]interface{}); ok {
// 		h, hOk := result["H"].(float64)
// 		v, vOk := result["V"].(float64)
// 		if hOk && vOk {
// 			fmt.Printf("Received move: H=%d, V=%d\n", int32(h), int32(v))
// 		} else {
// 			fmt.Println("Unexpected result format:", result)
// 		}
// 	} else {
// 		fmt.Println("Unexpected response format:", res)
// 	}
// }

// func main() {
// 	dab := &Dab{
// 		Human:         0,
// 		Robot:         1,
// 		Record:        [][]int{}, // Example moves
// 		TimeoutOffset: 0,
// 		Turn:          1,
// 	}
// 	robot := NewRobot(dab)

// 	// Request a move from the server
// 	robot.RequestMove()
// }
